
import logging
import os

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, FSInputFile
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties
from aiohttp import web
from dotenv import load_dotenv

load_dotenv()

TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")



bot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher(storage=MemoryStorage())

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def main_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìç –ö–∞—Ä—Ç–∞"), KeyboardButton(text="üíÉ –¢–∞–Ω—Ü—ã")],
            [KeyboardButton(text="üß© –ö–≤–µ—Å—Ç"), KeyboardButton(text="ü§≥ –°—Ç–∏–∫–µ—Ä")],
            [KeyboardButton(text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"), KeyboardButton(text="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞")],
            [KeyboardButton(text="üé• –ö—Ä—É–∂–æ–∫")]
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
    )

@dp.message(F.text == "/start")
async def start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üëã –≠—Ç–æ –±–æ—Ç Avito √ó –î–∏–∫–∞—è –ú—è—Ç–∞. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.",
        reply_markup=main_menu()
    )

@dp.message(F.text == "üìç –ö–∞—Ä—Ç–∞")
async def handle_map(message: Message):
    await message.answer("üó∫ –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–∞—Ä—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.")

@dp.message(F.text == "üíÉ –¢–∞–Ω—Ü—ã")
async def handle_dance(message: Message):
    await message.answer("üíÉ –ü–æ–π–¥–µ–º —Ç–∞–Ω—Ü–µ–≤–∞—Ç—å!")

@dp.message(F.text == "üß© –ö–≤–µ—Å—Ç")
async def handle_quest(message: Message):
    await message.answer("üß© –£—á–∞—Å—Ç–≤—É–π –≤ –∫–≤–µ—Å—Ç–µ –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–π –ø—Ä–∏–∑—ã!")

@dp.message(F.text == "ü§≥ –°—Ç–∏–∫–µ—Ä")
async def handle_sticker(message: Message):
    await message.answer("ü§≥ –ü–æ–ª—É—á–∏ —Å—Ç–∏–∫–µ—Ä-–ø–∞–∫ –ø–æ —Å—Å—ã–ª–∫–µ: https://t.me/addstickers/example")

@dp.message(F.text == "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def handle_schedule(message: Message):
    await message.answer("üìÖ –°–º–æ—Ç—Ä–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–¥–µ—Å—å: https://example.com/schedule")

@dp.message(F.text == "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def handle_support(message: Message):
    await message.answer("üÜò –ù–∞–ø–∏—à–∏ @support_helper –ø–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º.")

@dp.message(F.text == "üé• –ö—Ä—É–∂–æ–∫")
async def handle_circle(message: Message):
    video_path = "circle.mp4"
    if not os.path.exists(video_path):
        await message.answer("‚ùå –ö—Ä—É–∂–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ–±–∞–≤—å —Ñ–∞–π–ª circle.mp4 –≤ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞.")
        return
    video = FSInputFile(video_path)
    await bot.send_video_note(chat_id=message.chat.id, video_note=video)

async def webhook_handler(request):
    body = await request.read()
    update = bot.session.json_loads(body)
    await dp.feed_update(bot=bot, update=update)
    return web.Response()

async def on_startup(app):
    logger.info(">>> –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook...")
    await bot.set_webhook(WEBHOOK_URL)

app = web.Application()
app.router.add_post("/webhook", webhook_handler)
app.on_startup.append(on_startup)

if __name__ == "__main__":
    web.run_app(app, host="0.0.0.0", port=10000)
