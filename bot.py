import os
import logging
import json
import threading
from datetime import datetime
import telebot
from telebot import types
from app import app, db
from models import User, Registration, QuestProgress, StickerGeneration, AdminLog
from sticker_generator import generate_sticker
from quest_manager import QuestManager
import pandas as pd
import io

# Bot token from environment
BOT_TOKEN = os.getenv("BOT_TOKEN")

# Initialize bot
bot = telebot.TeleBot(BOT_TOKEN)

# Initialize quest manager
quest_manager = QuestManager()

# Available time slots
TIME_SLOTS = ["12:00", "14:00", "16:00", "18:00", "20:00"]
DAYS = ["day1", "day2", "day3"]

# User states for photo upload
user_states = {}

@bot.message_handler(commands=['start'])
def start_command(message):
    """Handle /start command"""
    user_id = str(message.from_user.id)
    
    with app.app_context():
        # Create or get user
        db_user = User.query.filter_by(telegram_id=user_id).first()
        if not db_user:
            db_user = User(
                telegram_id=user_id,
                username=message.from_user.username,
                first_name=message.from_user.first_name,
                last_name=message.from_user.last_name
            )
            db.session.add(db_user)
            db.session.commit()
    
    # Send welcome message
    welcome_text = f"üé™ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Ñ–µ—Å—Ç–∏–≤–∞–ª—å Avito √ó Dikaya Myata, {message.from_user.first_name}!\n\n"
    welcome_text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
    
    # Create inline keyboard
    markup = types.InlineKeyboardMarkup()
    markup.row(types.InlineKeyboardButton("üìç –ö–∞—Ä—Ç–∞", callback_data="map"))
    markup.row(
        types.InlineKeyboardButton("üíÉ –¢–∞–Ω—Ü—ã", callback_data="dance"),
        types.InlineKeyboardButton("üßò –ô–æ–≥–∞", callback_data="yoga")
    )
    markup.row(
        types.InlineKeyboardButton("üß© –ö–≤–µ—Å—Ç", callback_data="quest"),
        types.InlineKeyboardButton("ü§≥ –°—Ç–∏–∫–µ—Ä", callback_data="sticker")
    )
    markup.row(types.InlineKeyboardButton("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="schedule"))
    
    bot.send_message(message.chat.id, welcome_text, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    """Handle button callbacks"""
    user_id = str(call.from_user.id)
    data = call.data
    
    try:
        if data == "map":
            handle_map(call)
        elif data == "dance":
            handle_activity_registration(call, "dance")
        elif data == "yoga":
            handle_activity_registration(call, "yoga")
        elif data == "quest":
            handle_quest(call)
        elif data == "sticker":
            handle_sticker_request(call)
        elif data == "schedule":
            handle_schedule(call)
        elif data.startswith("register_"):
            handle_registration_selection(call)
        elif data == "back_to_menu":
            show_main_menu(call)
        
        bot.answer_callback_query(call.id)
    except Exception as e:
        logging.error(f"Error in callback handler: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

def handle_map(call):
    """Send festival map"""
    map_text = "üó∫Ô∏è –ö–∞—Ä—Ç–∞ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è\n\n"
    map_text += "üìç –û—Å–Ω–æ–≤–Ω—ã–µ –∑–æ–Ω—ã:\n"
    map_text += "üéµ –ì–ª–∞–≤–Ω–∞—è —Å—Ü–µ–Ω–∞\n"
    map_text += "üíÉ –¢–∞–Ω—Ü–µ–≤–∞–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥–∫–∞\n"
    map_text += "üßò –ô–æ–≥–∞-–∑–æ–Ω–∞\n"
    map_text += "üçΩÔ∏è –§—É–¥-–∫–æ—Ä—Ç\n"
    map_text += "üèÆ –ú–∞—è–∫ (–¥–ª—è –∫–≤–µ—Å—Ç–∞)\n\n"
    map_text += "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ª–æ–∫–∞—Ü–∏—é –Ω–∞ –∫–∞—Ä—Ç–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ!"
    
    markup = types.InlineKeyboardMarkup()
    markup.row(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu"))
    
    bot.edit_message_text(map_text, call.message.chat.id, call.message.message_id, reply_markup=markup)

def handle_activity_registration(call, activity_type):
    """Handle dance/yoga registration"""
    activity_name = "–¢–∞–Ω—Ü—ã" if activity_type == "dance" else "–ô–æ–≥–∞"
    
    text = f"üí´ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ {activity_name}\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –∏ –≤—Ä–µ–º—è:\n\n"
    
    markup = types.InlineKeyboardMarkup()
    for day_num, day in enumerate(DAYS, 1):
        day_name = f"–î–µ–Ω—å {day_num}"
        for time_slot in TIME_SLOTS:
            button_text = f"{day_name} - {time_slot}"
            callback_data = f"register_{activity_type}_{day}_{time_slot}"
            markup.row(types.InlineKeyboardButton(button_text, callback_data=callback_data))
    
    markup.row(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu"))
    
    bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=markup)

def handle_registration_selection(call):
    """Handle specific registration selection"""
    data_parts = call.data.split("_")
    activity_type = data_parts[1]
    day = data_parts[2]
    time_slot = data_parts[3]
    
    user_id = str(call.from_user.id)
    
    with app.app_context():
        db_user = User.query.filter_by(telegram_id=user_id).first()
        if db_user:
            # Check if already registered for this slot
            existing = Registration.query.filter_by(
                user_id=db_user.id,
                activity_type=activity_type,
                day=day,
                time_slot=time_slot
            ).first()
            
            if existing:
                text = "‚ùå –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è!"
            else:
                registration = Registration(
                    user_id=db_user.id,
                    activity_type=activity_type,
                    day=day,
                    time_slot=time_slot
                )
                db.session.add(registration)
                db.session.commit()
                
                activity_name = "–¢–∞–Ω—Ü—ã" if activity_type == "dance" else "–ô–æ–≥–∞"
                day_num = day.replace("day", "")
                text = f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n\n"
                text += f"üìÖ {activity_name}\n"
                text += f"üóìÔ∏è –î–µ–Ω—å {day_num}\n"
                text += f"üïí {time_slot}\n\n"
                text += "–£–≤–∏–¥–∏–º—Å—è –Ω–∞ —Ñ–µ—Å—Ç–∏–≤–∞–ª–µ! üéâ"
    
    markup = types.InlineKeyboardMarkup()
    markup.row(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu"))
    
    bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=markup)

def handle_quest(call):
    """Handle quest system"""
    user_id = str(call.from_user.id)
    
    with app.app_context():
        db_user = User.query.filter_by(telegram_id=user_id).first()
        if not db_user:
            return
        
        quest_progress = QuestProgress.query.filter_by(user_id=db_user.id).first()
        if not quest_progress:
            quest_progress = QuestProgress(user_id=db_user.id)
            db.session.add(quest_progress)
            db.session.commit()
        
        current_step = quest_progress.quest_step
        quest_info = quest_manager.get_quest_step(current_step)
        
        if quest_progress.completed:
            text = "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∫–≤–µ—Å—Ç!\n\n"
            text += "–ü–æ–∫–∞–∂–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞: QUEST_COMPLETE_2024"
        else:
            text = f"üß≠ –ö–≤–µ—Å—Ç - –®–∞–≥ {current_step}\n\n"
            text += quest_info['description'] if quest_info else "–ö–≤–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω"
        
        markup = types.InlineKeyboardMarkup()
        markup.row(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu"))
        
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=markup)

def handle_sticker_request(call):
    """Handle sticker generation request"""
    text = "ü§≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞\n\n"
    text += "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–µ —Ñ–æ—Ç–æ, –∏ —è —Å–æ–∑–¥–∞–º –¥–ª—è –≤–∞—Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å—Ç–∏–∫–µ—Ä —Å —Ä–∞–º–∫–æ–π —Ñ–µ—Å—Ç–∏–≤–∞–ª—è!\n\n"
    text += "üí° –°–æ–≤–µ—Ç: –õ—É—á—à–µ –≤—Å–µ–≥–æ —Ä–∞–±–æ—Ç–∞—é—Ç —Ñ–æ—Ç–æ —Å —á–µ—Ç–∫–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ª–∏—Ü–∞ –Ω–∞ –æ–¥–Ω–æ—Ç–æ–Ω–Ω–æ–º —Ñ–æ–Ω–µ."
    
    markup = types.InlineKeyboardMarkup()
    markup.row(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu"))
    
    # Set user state for photo upload
    user_states[call.from_user.id] = 'awaiting_photo'
    
    bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=markup)

def handle_schedule(call):
    """Show festival schedule"""
    text = "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è\n\n"
    text += "üé™ –î–µ–Ω—å 1\n"
    text += "12:00 - –û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è\n"
    text += "14:00 - –¢–∞–Ω—Ü—ã\n"
    text += "16:00 - –ô–æ–≥–∞\n"
    text += "18:00 - –ö–æ–Ω—Ü–µ—Ä—Ç\n"
    text += "20:00 - –í–µ—á–µ—Ä–∏–Ω–∫–∞\n\n"
    
    text += "üé™ –î–µ–Ω—å 2\n"
    text += "12:00 - –ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã\n"
    text += "14:00 - –¢–∞–Ω—Ü—ã\n"
    text += "16:00 - –ô–æ–≥–∞\n"
    text += "18:00 - –ö–≤–µ—Å—Ç\n"
    text += "20:00 - –ö–æ–Ω—Ü–µ—Ä—Ç\n\n"
    
    text += "üé™ –î–µ–Ω—å 3\n"
    text += "12:00 - –ô–æ–≥–∞\n"
    text += "14:00 - –¢–∞–Ω—Ü—ã\n"
    text += "16:00 - –§–∏–Ω–∞–ª—å–Ω–æ–µ —à–æ—É\n"
    text += "18:00 - –ó–∞–∫—Ä—ã—Ç–∏–µ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è"
    
    markup = types.InlineKeyboardMarkup()
    markup.row(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu"))
    
    bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=markup)

@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    """Handle photo uploads for sticker generation"""
    if message.from_user.id not in user_states or user_states[message.from_user.id] != 'awaiting_photo':
        return
    
    user_id = str(message.from_user.id)
    
    bot.send_message(message.chat.id, "üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à–µ —Ñ–æ—Ç–æ... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")
    
    try:
        # Get the highest resolution photo
        photo = message.photo[-1]
        file_info = bot.get_file(photo.file_id)
        photo_bytes = bot.download_file(file_info.file_path)
        
        with app.app_context():
            # Generate sticker (simplified version without external APIs for now)
            from sticker_generator import generate_simple_sticker, TEMPLATES
            import random
            
            template_info = random.choice(TEMPLATES)
            sticker_bytes = generate_simple_sticker(photo_bytes, template_info)
            
            if sticker_bytes:
                # Save to database
                db_user = User.query.filter_by(telegram_id=user_id).first()
                if db_user:
                    sticker_gen = StickerGeneration(
                        user_id=db_user.id,
                        template_used=template_info['name'],
                        original_photo_file_id=photo.file_id
                    )
                    db.session.add(sticker_gen)
                    db.session.commit()
                
                # Send sticker
                bot.send_photo(
                    message.chat.id,
                    sticker_bytes,
                    caption="üéâ –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∏–∫–µ—Ä –≥–æ—Ç–æ–≤!\n\n\"–•–æ—Ä–æ—à–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å —Ç–µ–±—è\" ‚ú®"
                )
            else:
                bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
    
    except Exception as e:
        logging.error(f"Error generating sticker: {e}")
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    finally:
        if message.from_user.id in user_states:
            del user_states[message.from_user.id]

def show_main_menu(call):
    """Show main menu"""
    welcome_text = "üé™ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ñ–µ—Å—Ç–∏–≤–∞–ª—è\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    markup = types.InlineKeyboardMarkup()
    markup.row(types.InlineKeyboardButton("üìç –ö–∞—Ä—Ç–∞", callback_data="map"))
    markup.row(
        types.InlineKeyboardButton("üíÉ –¢–∞–Ω—Ü—ã", callback_data="dance"),
        types.InlineKeyboardButton("üßò –ô–æ–≥–∞", callback_data="yoga")
    )
    markup.row(
        types.InlineKeyboardButton("üß© –ö–≤–µ—Å—Ç", callback_data="quest"),
        types.InlineKeyboardButton("ü§≥ –°—Ç–∏–∫–µ—Ä", callback_data="sticker")
    )
    markup.row(types.InlineKeyboardButton("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="schedule"))
    
    bot.edit_message_text(welcome_text, call.message.chat.id, call.message.message_id, reply_markup=markup)

# Admin commands
@bot.message_handler(commands=['admin_log'])
def admin_log_command(message):
    """Export participant data as CSV"""
    user_id = str(message.from_user.id)
    
    with app.app_context():
        user = User.query.filter_by(telegram_id=user_id).first()
        if not user or not user.is_admin:
            bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
            return
        
        # Get all registrations with user data
        registrations = db.session.query(Registration, User).join(User).all()
        
        data = []
        for reg, user in registrations:
            data.append({
                'telegram_id': user.telegram_id,
                'username': user.username,
                'first_name': user.first_name,
                'last_name': user.last_name,
                'activity': reg.activity_type,
                'day': reg.day,
                'time_slot': reg.time_slot,
                'registered_at': reg.created_at
            })
        
        if data:
            df = pd.DataFrame(data)
            csv_buffer = io.StringIO()
            df.to_csv(csv_buffer, index=False)
            csv_bytes = csv_buffer.getvalue().encode('utf-8')
            
            filename = f"participants_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
            bot.send_document(message.chat.id, csv_bytes, visible_file_name=filename)
        else:
            bot.send_message(message.chat.id, "üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")

@bot.message_handler(commands=['reset'])
def reset_user_command(message):
    """Reset user data"""
    user_id = str(message.from_user.id)
    
    with app.app_context():
        admin_user = User.query.filter_by(telegram_id=user_id).first()
        if not admin_user or not admin_user.is_admin:
            bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
            return
        
        command_parts = message.text.split()
        if len(command_parts) < 2:
            bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /reset <telegram_id>")
            return
        
        target_telegram_id = command_parts[1]
        target_user = User.query.filter_by(telegram_id=target_telegram_id).first()
        
        if not target_user:
            bot.send_message(message.chat.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        # Delete all user data
        Registration.query.filter_by(user_id=target_user.id).delete()
        QuestProgress.query.filter_by(user_id=target_user.id).delete()
        StickerGeneration.query.filter_by(user_id=target_user.id).delete()
        db.session.commit()
        
        bot.send_message(message.chat.id, f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_telegram_id} —Å–±—Ä–æ—à–µ–Ω—ã.")

@bot.message_handler(commands=['broadcast'])
def broadcast_command(message):
    """Broadcast message to all users"""
    user_id = str(message.from_user.id)
    
    with app.app_context():
        admin_user = User.query.filter_by(telegram_id=user_id).first()
        if not admin_user or not admin_user.is_admin:
            bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
            return
        
        command_parts = message.text.split(maxsplit=1)
        if len(command_parts) < 2:
            bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast <—Å–æ–æ–±—â–µ–Ω–∏–µ>")
            return
        
        broadcast_message = command_parts[1]
        users = User.query.all()
        
        sent_count = 0
        for user in users:
            try:
                bot.send_message(int(user.telegram_id), f"üì¢ {broadcast_message}")
                sent_count += 1
            except Exception as e:
                logging.error(f"Failed to send message to {user.telegram_id}: {e}")
        
        bot.send_message(message.chat.id, f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")

def start_bot():
    """Start the Telegram bot"""
    logging.info("Starting Telegram bot...")
    try:
        bot.infinity_polling(timeout=10, long_polling_timeout=5)
    except Exception as e:
        logging.error(f"Bot polling error: {e}")
